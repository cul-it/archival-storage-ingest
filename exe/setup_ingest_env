#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest/ingest_utils/ingest_utils'
require 'archival_storage_ingest/manifests/manifests'
require 'archival_storage_ingest/options/command_parser'
require 'archival_storage_ingest/preingest/base_env_initializer'
require 'archival_storage_ingest/preingest/ingest_env_initializer'
require 'archival_storage_ingest/ticket/ticket_handler'
require 'mail'

options = CommandParser::IngestParamsCommandParser.new
options.parse!(ARGV)

JAVA_PATH = ENV['JAVA_PATH'] || Manifests::FileIdentifier::DEFAULT_JAVA_PATH
TIKA_PATH = ENV['TIKA_PATH'] || Manifests::FileIdentifier::DEFAULT_TIKA_PATH
STORAGE_MANIFEST_SCHEMA = ENV['STORAGE_MANIFEST_SCHEMA'] || Manifests::ManifestValidator::DEFAULT_STORAGE_SCHEMA
INGEST_MANIFEST_SCHEMA = ENV['INGEST_MANIFEST_SCHEMA'] || Manifests::ManifestValidator::DEFAULT_INGEST_SCHEMA
INGEST_ROOT = ENV['INGEST_ROOT'] || '/cul/app/archival_storage_ingest/ingest'
WASABI_BUCKET = ENV['WASABI_BUCKET'] || 'wasabi-cular'
SFS_PREFIX = if ENV['SFS_PREFIX']
               ENV['SFS_PREFIX']
             elsif ENV['asi_develop'] || ENV['asi_deploy_manifest_develop']
               '/cul/app/archival_storage_ingest/test/deploy'
             else
               Manifests::DEFAULT_SFS_PREFIX
             end
file_identifier = Manifests::FileIdentifier.new(sfs_prefix: SFS_PREFIX, java_path: JAVA_PATH,
                                                tika_path: TIKA_PATH)
manifest_validator = Manifests::ManifestValidator.new(storage_schema: STORAGE_MANIFEST_SCHEMA,
                                                      ingest_schema: INGEST_MANIFEST_SCHEMA)
wasabi_manager = WasabiManager.new(WASABI_BUCKET)
env_initializer = Preingest::IngestEnvInitializer.new(ingest_root: INGEST_ROOT,
                                                      sfs_root: options.ingest_params.sfsbucket,
                                                      file_identifier:,
                                                      manifest_validator:,
                                                      wasabi_manager:)
env_initializer.initialize_ingest_env_from_params_obj(ingest_params: options.ingest_params)

if env_initializer.size_mismatch.empty?
  puts "Total size of assets: #{env_initializer.total_size}\n"
  puts "Command to queue ingest:\narchival_storage_ingest -i #{env_initializer.config_path}\n"
else
  puts "Size mismatch detected\n"
  env_initializer.size_mismatch.each do |path, mismatch|
    manifest_size = mismatch[:manifest]
    fs_size = mismatch[:fs]
    puts "#{path}: manifest file size: #{manifest_size}, source file size: #{fs_size}\n"
  end
end

# Currently, the jira ticket handler sends email to update Jira.
# We will use this logic to send notification email to dev admin.
# If we change the implementation of jira ticket handler, update this function.
unless options.notify_email.nil?
  mail = Mail.new do
    subject "Setup ingest env complete for #{options.depositor}/#{options.collection_id}"
    body "Setup ingest env complete for #{options.depositor}/#{options.collection_id}"
  end
  mail.from(TicketHandler::DEFAULT_FROM)
  mail.to(options.notify_email)
  mail.deliver
end
