#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest/manifests/manifests'
require 'archival_storage_ingest/manifests/deploy_collection_manifest'
require 'archival_storage_ingest/manifests/base_manifest_deployer'
require 'misc/archive_size'
require 'archival_storage_ingest/s3/s3_manager'
require 'archival_storage_ingest/ingest_utils/ingest_utils'
require 'archival_storage_ingest/logs/application_logger'

class StorageManifestDeployer < BaseManifestDeployer
  def _manifest_deployer
    Manifests::CollectionManifestDeployer.new(
      manifests_path: manifest_of_manifests, s3_manager:, s3_west_manager:, wasabi_manager:,
      sfs_prefix:, manifest_validator:, file_identifier:, manifest_storage_manager:
    )
  end
end

# These MUST be shifted so that gets will get user input properly!
# https://www.ruby-forum.com/t/argv-stdin-and-gets/166427/3
new_collection_manifest = ARGV.shift
ingest_manifest = ARGV.shift
sfs = ARGV.shift
archives = []
archives_list = ARGV.shift || 'archival01,archival02,archival03,archival04,archival05,archival06,archival07'
archives_list.split(',').each do |bucket|
  archives.append({ archive: "/cul/data/#{bucket}" })
end

skip_data_addition = ARGV.shift
skip_data_addition = !(skip_data_addition.nil? || skip_data_addition != 'true')

manifest_deployer = StorageManifestDeployer.new
manifest_deployer.archives = archives
manifest_parameters = Manifests::ManifestParameters.new(
  storage_manifest_path: new_collection_manifest,
  ingest_manifest_path: ingest_manifest, sfs:, skip_data_addition:
)

# puts 'Deployment Summary'
# puts "S3 bucket: #{manifest_deployer.s3_bucket}"
# manifest_deployer.manifest_deployer.describe_deployment(manifest_def: manifest_definition)
# puts 'Proceed with deployment? (Y/N)'
# unless 'y'.casecmp(gets.chomp).zero?
#   puts 'Deployment terminated by user input.'
#   exit(true)
# end

index_type = ArchivalStorageIngestLogger::INDEX_TYPE_INGEST
stage = 'prod'
stage = 'dev' if ENV['asi_develop'] || ENV['asi_queue_develop']
stage = 'sandbox' if ENV['asi_sandbox'] || ENV['asi_queue_sandbox']
application_logger = ArchivalStorageIngestLogger.get_application_logger(stage:, index_type:,
                                                                        use_lambda_logger: true)

manifest_deployer.deploy_manifest(manifest_parameters:)

cm = Manifests.read_manifest(filename: new_collection_manifest)
agent = IngestUtils::Agent.new
log_doc = {
  job_id: '',
  login_user_id: agent.login_user_id,
  effective_user_id: agent.effective_user_id,
  originating_host: agent.hostname,
  originating_ip: agent.host_ip,
  log: "Deployed storage manifest for #{cm.depositor}/#{cm.collection_id}"
}
application_logger.log(log_doc)
