#!/usr/bin/env ruby
# frozen_string_literal: true

# rubocop:disable all

require 'pp'
require 'json'

require 'archival_storage_ingest'
require 'archival_storage_ingest/workers/fixity_worker'
require 'archival_storage_ingest/s3/s3_manager'
require 'archival_storage_ingest/manifests/manifests'

# require 'aws-sdk-s3'

class FixityCheck
  MANIFEST_PATH = '/cul/app/cular/manifest'

  attr_reader :s3, :worker

  def s3
    @s3 ||= S3Manager.new('s3-cular')
  end

  def worker
    @worker ||= FixityWorker::IngestFixityS3Generator.new(s3)
  end

  # @return [list of manifest objects]
  def manifest_list
    IO.readlines('collection_manifests.txt')
  end

  def generate_fixity_manifest(msg)
    worker.generate_manifest(msg)
  end

  def manifests
    manifest_list.reverse.map do |path|
      path.strip!
      dirs = path.split('/') # TODO: Fix this part to be more generic
      collection = dirs[-2]
      depositor = File.join(dirs[4...-2])
      ingest_manifest = File.join(dirs[4..-1])

      IngestMessage::SQSMessage.new(
        depositor: depositor,
        collection: collection,
        ingest_manifest: ingest_manifest
      )
    end
  end

  def compare_manifest(manifest, path)
    dep = path.depositor
    col = path.collection

    fixity_manifest_json = manifest.to_old_manifest(dep, col).to_json
    fixity_manifest = Manifests::Manifest.new(filename: 'fixity', json: StringIO.new(fixity_manifest_json))

    ingest_manifest_json = s3.retrieve_file(path.ingest_manifest)
    ingest_manifest = Manifests::Manifest.new(filename: 'collection', json: ingest_manifest_json)

    difference = fixity_manifest.diff(ingest_manifest)

    unless difference.keys.length == 1 && difference['fixity'].keys.length == 1
      pp difference
      raise "#{dep} #{col} failed!"
    end
  end

  def check_manifest(path)
    manifest = generate_fixity_manifest(path)
    compare_manifest(manifest, path)
  end

  def check_all_manifests
    paths = manifests

    paths.each(&method(:check_manifest))
  end
end

checker = FixityCheck.new
checker.check_all_manifests
