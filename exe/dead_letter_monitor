#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/monitor/dead_letter_monitor'

ArchivalStorageIngest.configure do |config|
  config.log_path = ENV['asi_dead_letter_monitor_log_path'] ||
                    "#{ENV['default_cular_log_path']}/dead_letter_monitor.log"
end

dead_letter_queues =
  if ENV['asi_develop'] || ENV['asi_dead_letter_monitor_develop']
    [
      Queues::DEV_QUEUE_INGEST_FAILURES,
      Queues::DEV_QUEUE_TRANSFER_S3_FAILURES,
      Queues::DEV_QUEUE_TRANSFER_SFS_FAILURES,
      Queues::DEV_QUEUE_INGEST_FIXITY_S3_FAILURES,
      Queues::DEV_QUEUE_INGEST_FIXITY_SFS_FAILURES,
      Queues::DEV_QUEUE_INGEST_FIXITY_COMPARISON_FAILURES
    ]
  else
    [
      Queues::QUEUE_INGEST_FAILURES,
      Queues::QUEUE_TRANSFER_S3_FAILURES,
      Queues::QUEUE_TRANSFER_SFS_FAILURES,
      Queues::QUEUE_INGEST_FIXITY_S3_FAILURES,
      Queues::QUEUE_INGEST_FIXITY_SFS_FAILURES,
      Queues::QUEUE_INGEST_FIXITY_COMPARISON_FAILURES,
      Queues::QUEUE_PERIODIC_FIXITY_S3_FAILURES,
      Queues::QUEUE_PERIODIC_FIXITY_SFS_FAILURES,
      Queues::QUEUE_PERIODIC_FIXITY_COMPARISON_FAILURES
    ]
  end

dead_letter_monitor = DeadLetterMonitor::DeadLetterMonitor.new(dead_letter_queues: dead_letter_queues)
dead_letter_monitor.check_dead_letter_queues
