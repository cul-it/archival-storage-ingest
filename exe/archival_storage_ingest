#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest/options/command_parser'
require 'yaml'

require 'archival_storage_ingest'
require 'archival_storage_ingest/workers/worker'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/work_queuer/work_queuer'
require 'archival_storage_ingest/ingest_utils/configure_helper'
require 'archival_storage_ingest/ingest_utils/ingest_utils'
require 'archival_storage_ingest/logs/application_logger'

# We assume the ingest is initiated from server farm VM.
application_logger = nil
# The following populates configuration values for ArchivalStorageIngest.
# config is an instance of ArchivalStorageIngest::Configuration, passed in
# via yield.
ArchivalStorageIngest.configure do |config|
  config.log_path = ENV['asi_ingest_queue_log_path'] ||
                    "#{ENV.fetch('default_cular_log_path')}/ingest_queue.log"
  config.dry_run = ENV['asi_ingest_queue_dry_run'] || false

  config_params = {
    queue_name: Queues::QUEUE_INGEST,
    dest_queue_names: [],
    asi_develop: ENV['asi_develop'] || ENV.fetch('asi_queue_develop', false),
    asi_sandbox: ENV['asi_sandbox'] || ENV.fetch('asi_queue_sandbox', false)
  }
  # ConfigureHelper sets up and adds more config values: stage, queue names, develop,
  #  debug, s3_bucket.
  configure_helper = IngestUtils::ConfigureHelper.new(config_params)
  configure_helper.configure(config)

  index_type = ArchivalStorageIngestLogger::INDEX_TYPE_INGEST
  application_logger = ArchivalStorageIngestLogger.get_application_logger(
    stage: config.stage, index_type:,
    use_lambda_logger: IngestUtils.boolean_from_param(param: ENV.fetch('use_lambda_logger'), default: true)
  )

  config.worker = Workers::Worker.new(application_logger)
end

option_parser = CommandParser::IngestCommandParser.new
option_parser.parse!(ARGV)
ingest_config = YAML.load_file(option_parser.ingest_config)

ingest_queuer = WorkQueuer::IngestQueuer.new
work_msg = ingest_queuer.queue_ingest(ingest_config)

if work_msg
  agent = IngestUtils::Agent.new
  log_doc = {
    job_id: work_msg.job_id,
    login_user_id: agent.login_user_id,
    effective_user_id: agent.effective_user_id,
    originating_host: agent.hostname,
    originating_ip: agent.host_ip,
    log: "Ingest for #{work_msg.depositor}/#{work_msg.collection} has started."
  }
  application_logger.log(log_doc)
end
