#!/usr/bin/env ruby
# frozen_string_literal: true

# Use this script to retroactively add file id to existing collection

require 'archival_storage_ingest/manifests/manifests'
require 'archival_storage_ingest/manifests/deploy_collection_manifest'
require 'csv'
require 'fileutils'
require 'json'

java_path = ENV['asi_java_path'] || '/usr/bin/java'
tika_path = ENV['asi_tika_path'] || '/cul/app/tika/tika-app-2.1.0.jar'
file_identifier = Manifests::FileIdentifier.new(java_path: java_path, tika_path: tika_path,
                                                sfs_prefix: Manifests::SFS_PREFIX)

def identify_files_from_storage(storage_manifest:, file_identifier:)
  storage_manifest.walk_all_filepath do |file|
    file.media_type = file_identifier.identify_from_storage(manifest: storage_manifest, file: file)
    file.tool_version = Manifests::IDENTIFY_TOOL
  end

  storage_manifest
end

bucket = ARGV.shift
sfs = "/cul/data/#{bucket}"
input = ARGV.shift
CSV.foreach(input, headers: true, header_converters: :symbol) do |row|
  next if row[:depositor].nil?

  manifest_name = "_EM_#{row[:depositor]}_#{row[:collection]}.json"
  sfs_path = "#{sfs}/#{row[:depositor]}/#{row[:collection]}/#{manifest_name}"
  local_copy = "old/#{bucket}/#{manifest_name}"
  FileUtils.copy(sfs_path, local_copy)
  storage_manifest = Manifests.read_manifest(filename: local_copy)
  new_storage_manifest = identify_files_from_storage(storage_manifest: storage_manifest,
                                                     file_identifier: file_identifier)
  new_dest = "new/#{bucket}/#{manifest_name}"
  File.open(new_dest, 'w') do |file|
    file.write JSON.pretty_generate(new_storage_manifest.to_json_storage_hash)
  end
end
