#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/ingest_message'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/preingest/ingest_env_initializer'
require 'archival_storage_ingest/workers/fixity_compare_worker'
require 'archival_storage_ingest/ticket/ticket_handler'
require 'archival_storage_ingest/ticket/issue_tracker'

if ENV['asi_periodic_fixity_slack_web_hook'].nil?
  puts 'asi_periodic_fixity_slack_web_hook env variable is required'
  exit
end

ArchivalStorageIngest.configure do |config| # rubocop: disable Metrics/BlockLength
  config.log_path = ENV['asi_periodic_fixity_comparison_log_path'] ||
                    '/cul/app/archival_storage_ingest/logs/periodic_fixity_comparison.log'
  config.dry_run = ENV['asi_periodic_fixity_comparison_dry_run'] || false
  config.polling_interval = ENV['asi_periodic_fixity_comparison_polling_interval'].to_i if
                            ENV['asi_periodic_fixity_comparison_polling_interval']
  config.inhibit_file = ENV['asi_periodic_fixity_comparison_inhibit_file'] ||
                        '/cul/app/archival_storage_ingest/control/periodic_fixity_comparison.inhibit'
  config.global_inhibit_file = ENV['asi_global_inhibit_file'] ||
                               '/cul/app/archival_storage_ingest/control/archival_storage.inhibit'

  # s3_manager: nil, manifest_dir:, man_of_mans:, periodic_fixity_root:, sfs_root:
  manifest_dir = ENV['asi_periodic_fixity_comparison_manifest_dir'] ||
                 '/cul/app/archival_storage_ingest/manifest_storage'
  man_of_mans = ENV['asi_periodic_fixity_comparison_manifest_of_manifest'] ||
                '/cul/app/archival_storage_ingest/manifest_of_manifests/manifest_of_manifests.json'
  periodic_fixity_root = ENV['asi_periodic_fixity_comparison_periodic_fixity_root'] ||
                         '/cul/app/archival_storage_ingest/periodic_fixity'
  sfs_root = ENV['asi_periodic_fixity_comparison_sfs_root'] || Preingest::DEFAULT_SFS_ROOT
  relay_queue_name = Queues::QUEUE_PERIODIC_FIXITY

  if ENV['asi_develop'] || ENV['asi_periodic_fixity_comparison_develop']
    config.s3_bucket = 's3-cular-dev'
    config.debug = true
    config.develop = true
    config.message_queue_name = Queues::DEV_QUEUE_PERIODIC_FIXITY_COMPARISON
    config.in_progress_queue_name = Queues::DEV_QUEUE_PERIODIC_FIXITY_COMPARISON_IN_PROGRESS
    config.dest_queue_names = [Queues::DEV_QUEUE_COMPLETE]
    relay_queue_name = Queues::DEV_QUEUE_PERIODIC_FIXITY
  else
    config.s3_bucket = 's3-cular'
    config.debug = ENV['asi_periodic_fixity_comparison_debug'] ? true : false
    config.develop = false
    config.message_queue_name = Queues::QUEUE_PERIODIC_FIXITY_COMPARISON
    config.in_progress_queue_name = Queues::QUEUE_PERIODIC_FIXITY_COMPARISON_IN_PROGRESS
    config.dest_queue_names = [Queues::QUEUE_COMPLETE]
  end

  config.worker = FixityCompareWorker::PeriodicFixityComparator.new(
    manifest_dir: manifest_dir,
    man_of_mans: man_of_mans,
    periodic_fixity_root: periodic_fixity_root,
    sfs_root: sfs_root,
    relay_queue_name: relay_queue_name
  )
  config.worker.platform = IngestMessage::PLATFORM_SERVERFARM

  slack_handler = TicketHandler::SlackHandler.new(web_hook: ENV['asi_periodic_fixity_slack_web_hook'])
  config.issue_logger = TicketHandler::PeriodicFixityComparatorTracker.new(worker: config.worker.name,
                                                                           queue: config.log_queue,
                                                                           slack_handler: slack_handler)
end

ingest_manager = ArchivalStorageIngest::IngestManager.new
ingest_manager.start_server
