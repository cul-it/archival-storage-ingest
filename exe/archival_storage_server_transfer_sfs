#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/ingest_utils/configure_helper'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/workers/transfer_worker'
require 'archival_storage_ingest/logs/application_logger'

ArchivalStorageIngest.configure do |config|
  config.log_path = ENV['asi_transfer_sfs_log_path'] ||
                    "#{ENV['default_cular_log_path']}/transfer_sfs.log"
  config.dry_run = ENV['asi_transfer_sfs_dry_run'] || false
  config.polling_interval = ENV['asi_transfer_sfs_polling_interval'].to_i if
                            ENV['asi_transfer_sfs_polling_interval']
  config.inhibit_file = ENV['asi_transfer_sfs_inhibit_file'] ||
                        '/cul/app/archival_storage_ingest/control/transfer_sfs.inhibit'
  config.global_inhibit_file = ENV['asi_global_inhibit_file'] ||
                               '/cul/app/archival_storage_ingest/control/archival_storage.inhibit'

  config_params = {
    queue_name: Queues::QUEUE_TRANSFER_SFS,
    dest_queue_names: [Queues::QUEUE_INGEST_FIXITY_SFS],
    asi_develop: ENV['asi_develop'] || ENV['asi_ingest_transfer_sfs_develop'],
    asi_sandbox: ENV['asi_sandbox'] || ENV['asi_ingest_transfer_sfs_sandbox']
  }
  configure_helper = IngestUtils::ConfigureHelper.new(config_params)
  config = configure_helper.configure(config)

  index_type = ArchivalStorageIngestLogger::INDEX_TYPE_INGEST
  application_logger = ArchivalStorageIngestLogger.get_application_logger(stage: config.stage, index_type: index_type,
                                                                          use_lambda_logger: ENV['use_lambda_logger'])
  config.worker = TransferWorker::SFSTransferer.new(application_logger)
end

ingest_manager = ArchivalStorageIngest::IngestManager.new
ingest_manager.start_server
