#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/ingest_utils/configure_helper'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/workers/ingest_worker'
require 'archival_storage_ingest/ticket/ticket_handler'
require 'archival_storage_ingest/ticket/issue_tracker'

if ENV['asi_periodic_fixity_slack_web_hook'].nil?
  puts 'asi_periodic_fixity_slack_web_hook env variable is required'
  exit
end

ArchivalStorageIngest.configure do |config|
  config.log_path = ENV['asi_ingest_periodic_fixity_check_path'] ||
                    '/cul/app/archival_storage_ingest/logs/periodic_fixity_check.log'
  config.dry_run = ENV['asi_periodic_fixity_dry_run'] || false
  config.polling_interval = ENV['asi_periodic_fixity_polling_interval'].to_i if ENV['asi_periodic_fixity_polling_interval']
  config.inhibit_file = ENV['asi_periodic_fixity_inhibit_file'] ||
                        '/cul/app/archival_storage_ingest/control/periodic_fixity.inhibit'
  config.global_inhibit_file = ENV['asi_global_inhibit_file'] ||
                               '/cul/app/archival_storage_ingest/control/archival_storage.inhibit'

  config_params = {
    queue_name: Queues::QUEUE_PERIODIC_FIXITY,
    dest_queue_names: [QUEUE_PERIODIC_FIXITY_S3, QUEUE_PERIODIC_FIXITY_SFS],
    asi_develop: ENV['asi_develop'] || ENV['asi_periodic_fixity_check_develop'],
    asi_sandbox: ENV['asi_sandbox'] || ENV['asi_periodic_fixity_check_sandbox']
  }
  configure_helper = IngestUtils::ConfigureHelper.new
  config = configure_helper.configure(config: config, params: config_params)

  # stage = ArchivalStorageIngest::STAGE_PROD
  # config.s3_bucket = 's3-cular'
  # config.debug = ENV['asi_ingest_debug'] ? true : false
  # config.develop = false
  # if ENV['asi_develop'] || ENV['asi_periodic_fixity_check_develop']
  #   config.s3_bucket = 's3-cular-dev'
  #   config.debug = true
  #   config.develop = true
  #   stage = ArchivalStorageIngest::STAGE_DEV
  # elsif ENV['asi_sandbox'] || ENV['asi_periodic_fixity_check_sandbox']
  #   config.s3_bucket = 's3-cular-sandbox'
  #   config.debug = true
  #   config.develop = true
  #   stage = ArchivalStorageIngest::STAGE_SANDBOX
  # end
  #
  # config.stage = stage
  # config.message_queue_name = Queues.resolve_queue_name(queue: Queues::QUEUE_PERIODIC_FIXITY, stage: stage)
  # config.in_progress_queue_name = Queues.resolve_in_progress_queue_name(queue: Queues::QUEUE_PERIODIC_FIXITY, stage: stage)
  # config.dest_queue_names = [Queues.resolve_queue_name(queue: Queues::QUEUE_PERIODIC_FIXITY_S3, stage: stage),
  #                            Queues.resolve_queue_name(queue: Queues::QUEUE_PERIODIC_FIXITY_SFS, stage: stage)]
  index_type = ArchivalStorageIngestLogger::INDEX_TYPE_PERIODIC_FIXITY
  application_logger = ArchivalStorageIngestLogger::ApplicationLogger.new(stage: config.stage, type: index_type)
  config.worker = IngestWorker.new(application_logger)
  slack_handler = TicketHandler::SlackHandler.new(web_hook: ENV['asi_periodic_fixity_slack_web_hook'])
  config.issue_logger = TicketHandler::PeriodicFixityTracker.new(worker: config.worker.name,
                                                                 queue: config.log_queue,
                                                                 slack_handler: slack_handler)
end

ingest_manager = ArchivalStorageIngest::IngestManager.new
ingest_manager.start_server
