#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/ingest_utils/configure_helper'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/workers/ingest_worker'
require 'archival_storage_ingest/ticket/ticket_handler'
require 'archival_storage_ingest/ticket/issue_tracker'
require 'archival_storage_ingest/logs/application_logger'

if ENV['asi_periodic_fixity_slack_web_hook'].nil?
  puts 'asi_periodic_fixity_slack_web_hook env variable is required'
  exit
end

# rubocop:disable Metrics/BlockLength
ArchivalStorageIngest.configure do |config|
  config.log_path = ENV['asi_ingest_periodic_fixity_check_path'] ||
                    "#{ENV.fetch('default_cular_log_path', nil)}/periodic_fixity_check.log"
  config.dry_run = ENV['asi_periodic_fixity_dry_run'] || false
  if ENV['asi_periodic_fixity_polling_interval']
    config.polling_interval = ENV['asi_periodic_fixity_polling_interval'].to_i
  end
  config.inhibit_file = ENV['asi_periodic_fixity_inhibit_file'] ||
                        '/cul/app/archival_storage_ingest/control/periodic_fixity.inhibit'
  config.global_inhibit_file = ENV['asi_global_inhibit_file'] ||
                               '/cul/app/archival_storage_ingest/control/archival_storage.inhibit'

  config_params = {
    queue_name: Queues::QUEUE_PERIODIC_FIXITY,
    dest_queue_names: [Queues::QUEUE_PERIODIC_FIXITY_SFS],
    asi_develop: ENV['asi_develop'] || ENV.fetch('asi_periodic_fixity_check_develop', nil),
    asi_sandbox: ENV['asi_sandbox'] || ENV.fetch('asi_periodic_fixity_check_sandbox', nil)
  }
  configure_helper = IngestUtils::ConfigureHelper.new(config_params)
  config = configure_helper.configure(config)

  index_type = ArchivalStorageIngestLogger::INDEX_TYPE_PERIODIC_FIXITY
  application_logger = ArchivalStorageIngestLogger.get_application_logger(
    stage: config.stage, index_type:,
    use_lambda_logger: IngestUtils.boolean_from_param(param: ENV.fetch('use_lambda_logger'), default: true)
  )
  config.worker = IngestWorker.new(application_logger)
  slack_handler = TicketHandler::SlackHandler.new(web_hook: ENV.fetch('asi_periodic_fixity_slack_web_hook', nil))
  config.issue_logger = TicketHandler::PeriodicFixityTracker.new(worker: config.worker.name,
                                                                 queue: config.log_queue,
                                                                 slack_handler:)
end
# rubocop:enable Metrics/BlockLength

ingest_manager = ArchivalStorageIngest::IngestManager.new
ingest_manager.start_server
