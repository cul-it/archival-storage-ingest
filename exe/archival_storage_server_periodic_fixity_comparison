#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archival_storage_ingest'
require 'archival_storage_ingest/ingest_utils/configure_helper'
require 'archival_storage_ingest/logs/archival_storage_ingest_logger'
require 'archival_storage_ingest/messages/queues'
require 'archival_storage_ingest/preingest/ingest_env_initializer'
require 'archival_storage_ingest/workers/fixity_compare_worker'
require 'archival_storage_ingest/ticket/ticket_handler'
require 'archival_storage_ingest/ticket/issue_tracker'
require 'archival_storage_ingest/logs/application_logger'

if ENV['asi_periodic_fixity_slack_web_hook'].nil?
  puts 'asi_periodic_fixity_slack_web_hook env variable is required'
  exit
end

log_path = ENV['asi_periodic_fixity_comparison_log_path'] ||
           "#{ENV.fetch('default_cular_log_path', nil)}/periodic_fixity_comparison.log"
polling_interval = ENV['asi_periodic_fixity_comparison_polling_interval'].to_i if
  ENV['asi_periodic_fixity_comparison_polling_interval']
inhibit_file = ENV['asi_periodic_fixity_comparison_inhibit_file'] ||
               '/cul/app/archival_storage_ingest/control/periodic_fixity_comparison.inhibit'
global_inhibit_file = ENV['asi_global_inhibit_file'] ||
                      '/cul/app/archival_storage_ingest/control/archival_storage.inhibit'

manifest_dir = ENV['asi_periodic_fixity_comparison_manifest_dir'] ||
               '/cul/app/archival_storage_ingest/manifest_storage'
man_of_mans = ENV['asi_periodic_fixity_comparison_manifest_of_manifest'] ||
              '/cul/app/archival_storage_ingest/manifest_of_manifests/manifest_of_manifests.json'
periodic_fixity_root = ENV['asi_periodic_fixity_comparison_periodic_fixity_root'] ||
                       '/cul/app/archival_storage_ingest/periodic_fixity'
sfs_root = ENV['asi_periodic_fixity_comparison_sfs_root'] || Preingest::DEFAULT_SFS_ROOT

config_params = {
  queue_name: Queues::QUEUE_PERIODIC_FIXITY_COMPARISON,
  dest_queue_names: [Queues::QUEUE_COMPLETE],
  asi_develop: ENV['asi_develop'] || ENV.fetch('asi_periodic_fixity_comparison_develop', nil),
  asi_sandbox: ENV['asi_sandbox'] || ENV.fetch('asi_periodic_fixity_comparison_sandbox', nil)
}

ArchivalStorageIngest.configure do |config|
  config.log_path = log_path
  config.dry_run = ENV['asi_periodic_fixity_comparison_dry_run'] || false
  config.polling_interval = polling_interval if polling_interval
  config.inhibit_file = inhibit_file
  config.global_inhibit_file = global_inhibit_file

  configure_helper = IngestUtils::ConfigureHelper.new(config_params)
  config = configure_helper.configure(config)

  relay_queue_name = Queues.resolve_queue_name(queue: Queues::QUEUE_PERIODIC_FIXITY, stage: config.stage)
  index_type = ArchivalStorageIngestLogger::INDEX_TYPE_PERIODIC_FIXITY
  application_logger = ArchivalStorageIngestLogger.get_application_logger(
    stage: config.stage, index_type:,
    use_lambda_logger: IngestUtils.boolean_from_param(param: ENV.fetch('use_lambda_logger'), default: true)
  )
  config.worker = FixityCompareWorker::PeriodicFixityComparator.new(
    manifest_dir:, man_of_mans:, periodic_fixity_root:,
    sfs_root:, relay_queue_name:, application_logger:
  )

  slack_handler = TicketHandler::SlackHandler.new(web_hook: ENV.fetch('asi_periodic_fixity_slack_web_hook', nil))
  config.issue_logger = TicketHandler::PeriodicFixityComparatorTracker.new(worker: config.worker.name,
                                                                           queue: config.log_queue,
                                                                           slack_handler:)
end
ingest_manager = ArchivalStorageIngest::IngestManager.new
ingest_manager.start_server
